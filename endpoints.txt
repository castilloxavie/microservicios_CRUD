# ENDPOINTS DE LOS MICROSERVICIOS DE SUMA

## MICRO SERVICIO BODY (PUERTO 3001)
Base URL: http://localhost:3001/api

### POST /suma/body
- Descripción: Crear una nueva operación de suma enviando parámetros en el body
- Método: POST
- Content-Type: application/json
- Body ejemplo:
  {
    "numero1": 5,
    "numero2": 3
  }
- Respuesta exitosa: 201
  {
    "id": 1,
    "numero1": 5,
    "numero2": 3,
    "resultado": 8,
    "tipo_operacion": "suma",
    "tipo_parametros": "body"
  }

### GET /suma/body
- Descripción: Obtener todas las operaciones de suma por body
- Método: GET
- Respuesta exitosa: 200
  [
    {
      "id": 1,
      "numero1": 5,
      "numero2": 3,
      "resultado": 8,
      "tipo_operacion": "suma",
      "tipo_parametros": "body",
      "fecha_creacion": "2025-10-19 16:23:57"
    }
  ]

### PUT /suma/body/:id
- Descripción: Actualizar una operación de suma por body
- Método: PUT
- Parámetros URL: id (número)
- Content-Type: application/json
- Body ejemplo:
  {
    "numero1": 10,
    "numero2": 5
  }
- Respuesta exitosa: 200
  {
    "id": 1,
    "numero1": 10,
    "numero2": 5,
    "resultado": 15
  }

### DELETE /suma/body/:id
- Descripción: Eliminar una operación de suma por body
- Método: DELETE
- Parámetros URL: id (número)
- Respuesta exitosa: 200
  {
    "message": "Operación eliminada correctamente. 1"
  }

## MICRO SERVICIO QUERY (PUERTO 3002)
Base URL: http://localhost:3002/api

### POST /suma/query
- Descripción: Crear una nueva operación de suma enviando parámetros en query string
- Método: POST
- Query parameters: numero1, numero2
- Ejemplo: /suma/query?numero1=5&numero2=3
- Respuesta exitosa: 201
  {
    "id": 1,
    "numero1": "5",
    "numero2": "3",
    "resultado": 8,
    "tipo_operacion": "suma",
    "tipo_parametros": "query"
  }

### GET /suma/query
- Descripción: Obtener todas las operaciones de suma por query
- Método: GET
- Respuesta exitosa: 200
  [
    {
      "id": 1,
      "numero1": 5,
      "numero2": 3,
      "resultado": 8,
      "tipo_operacion": "suma",
      "tipo_parametros": "query",
      "fecha_creacion": "2025-10-19 16:43:19"
    }
  ]

### PUT /suma/query/:id
- Descripción: Actualizar una operación de suma por query
- Método: PUT
- Parámetros URL: id (número)
- Query parameters: numero1, numero2
- Ejemplo: /suma/query/1?numero1=10&numero2=5
- Respuesta exitosa: 200
  {
    "id": 1,
    "numero1": 10,
    "numero2": 5,
    "resultado": 15
  }

### DELETE /suma/query/:id
- Descripción: Eliminar una operación de suma por query
- Método: DELETE
- Parámetros URL: id (número)
- Respuesta exitosa: 200
  {
    "message": "Operación eliminada correctamente. 1"
  }

## MICRO SERVICIO PATH (PUERTO 3003)
Base URL: http://localhost:3003/api

### POST /suma/path/:numero1/:numero2
- Descripción: Crear una nueva operación de suma enviando parámetros en la URL
- Método: POST
- Parámetros URL: numero1, numero2
- Ejemplo: /suma/path/10/20
- Respuesta exitosa: 201
  {
    "id": 2,
    "numero1": "10",
    "numero2": "20",
    "resultado": 30,
    "tipo_operacion": "suma",
    "tipo_parametros": "path"
  }

### GET /suma/path
- Descripción: Obtener todas las operaciones de suma por path
- Método: GET
- Respuesta exitosa: 200
  [
    {
      "id": 2,
      "numero1": 10,
      "numero2": 20,
      "resultado": 30,
      "tipo_operacion": "suma",
      "tipo_parametros": "path",
      "fecha_creacion": "2025-10-19 16:43:29"
    }
  ]

### PUT /suma/path/:id/:numero1/:numero2
- Descripción: Actualizar una operación de suma por path
- Método: PUT
- Parámetros URL: id, numero1, numero2
- Ejemplo: /suma/path/1/15/25
- Respuesta exitosa: 200
  {
    "id": 1,
    "numero1": 15,
    "numero2": 25,
    "resultado": 40
  }

### DELETE /suma/path/:id
- Descripción: Eliminar una operación de suma por path
- Método: DELETE
- Parámetros URL: id (número)
- Respuesta exitosa: 200
  {
    "message": "Operación eliminada correctamente. 1"
  }

## COMANDOS PARA EJECUTAR LOS SERVIDORES

### Ejecutar servidor individual:
- npm run start:body   # Puerto 3001
- npm run start:query  # Puerto 3002
- npm run start:path   # Puerto 3003

### Ejecutar todos los servidores simultáneamente:
- npm run start:all

## BASE DE DATOS
- Tipo: SQLite
- Archivo: backend/src/database/app_database.db
- Tabla: operaciones
- Columnas: id, numero1, numero2, resultado, tipo_operacion, tipo_parametros, fecha_creacion

## NOTAS IMPORTANTES
- Todos los microservicios comparten la misma base de datos
- Los números se convierten automáticamente a tipo numérico para las operaciones
- Las respuestas incluyen el ID autoincremental y timestamp de creación
- Los errores se manejan con códigos HTTP apropiados (400, 500)
- CORS está habilitado para todas las solicitudes
